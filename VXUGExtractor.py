import os
import py7zr
import tempfile
import zipfly

import logging

from malware_extractor import MalwareExtractor


logger = logging.getLogger(__name__)


class VXUGExtractor(MalwareExtractor):

    def handle_entry(self, dirpath, filenames):
        input_path = os.path.join(self.collector_path, dirpath)
        output_path = os.path.join(self.collector_path, dirpath)
        for filename in filenames:
            if not filename.endswith(".7z"):
                # for the moment, all VXUG files are created with 7zip, so they all end in 7z. If we get soemthing
                # that doesn't, we'll assume it's an error, or artifact of some other process.
                continue
            output_file_name = filename.replace(".7z", ".zip")
            output_full_path = os.path.join(output_path, output_file_name)
            if os.path.exists(output_full_path):
                # we've already done this one, skip it
                continue
            self.make_zip(input_path, filename, output_full_path)
        pass

    def process_input(self):
        #
        for (dirpath, dirnames, filenames) in os.walk(self.collector_path):
            if filenames:
                try:
                    self.handle_entry(dirpath, filenames)
                except Exception:
                    logger.exception(f"Error processing {dirpath}")

    @staticmethod
    def make_zip(input_path, name, outupt_full_path):
        # extract the contents of the 7z file to a tempdir, then move all of them into the newly
        # created zip file in the same path.
        file_path = os.path.join(input_path, name)
        with tempfile.TemporaryDirectory(dir=input_path) as tempdir:
            archive = py7zr.SevenZipFile(file_path, mode="r")
            if archive.needs_password():
                archive = py7zr.SevenZipFile(file_path, mode="r", password="infected")
            archive.extractall(path=tempdir)
            archive.close()

            already_added_files = set()
            target_paths = list()
            for dirpath, dirnames, filenames in os.walk(tempdir):
                for filename in filenames:
                    # handle potential duplicate filenames in subdirectories by flattening
                    # directory structure into name, separated by "___"
                    relative_path = dirpath.replace(tempdir, "")
                    flattened_name = relative_path.replace(os.sep, "___")
                    add_filename = flattened_name + filename
                    if add_filename in already_added_files:
                        continue
                    target_paths.append({"fs": os.path.join(dirpath, filename),
                                         "n": add_filename})
                    already_added_files.add(add_filename)
            with open(outupt_full_path, "wb") as zip_archive:
                zfly = zipfly.ZipFly(paths=target_paths)
                generator = zfly.generator()
                for i in generator:
                    zip_archive.write(i)


if __name__ == "__main__":
    logger.info("VXUG Extractor starting up.")
    # assume mounted path is path to directory of files, so skipping any need for sub-directories.
    collector_path = os.environ.get("COLLECTOR_PATH")
    extractor_path = os.environ.get("EXTRACTOR_PATH")
    extractor = VXUGExtractor(collector_path, extractor_path)
    extractor.process_input()
    logger.info("VXUG Extractor completed.")
